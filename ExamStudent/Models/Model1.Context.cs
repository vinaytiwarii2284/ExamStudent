//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamStudent.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExamStudentContext : DbContext
    {
        public ExamStudentContext()
            : base("name=ExamStudentContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<AdminEmployeeReferSetting> AdminEmployeeReferSettings { get; set; }
        public virtual DbSet<AdminRefer> AdminRefers { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<BoardType> BoardTypes { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Choice> Choices { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<City_Old> City_Old { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Emp_City> Emp_City { get; set; }
        public virtual DbSet<EmpBankDetail> EmpBankDetails { get; set; }
        public virtual DbSet<EmpCourse> EmpCourses { get; set; }
        public virtual DbSet<Employee_Form> Employee_Form { get; set; }
        public virtual DbSet<Employee_Form_Temp> Employee_Form_Temp { get; set; }
        public virtual DbSet<EmpState> EmpStates { get; set; }
        public virtual DbSet<ExamResult> ExamResults { get; set; }
        public virtual DbSet<MasterSalary> MasterSalaries { get; set; }
        public virtual DbSet<Medium> Mediums { get; set; }
        public virtual DbSet<MockQuestionBank> MockQuestionBanks { get; set; }
        public virtual DbSet<PartnerCart> PartnerCarts { get; set; }
        public virtual DbSet<PartnerCartItem> PartnerCartItems { get; set; }
        public virtual DbSet<PostForm> PostForms { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Refer> Refers { get; set; }
        public virtual DbSet<ReferalForm> ReferalForms { get; set; }
        public virtual DbSet<ScheduleExam> ScheduleExams { get; set; }
        public virtual DbSet<Standard> Standards { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<State_Old> State_Old { get; set; }
        public virtual DbSet<StudentBankDetail> StudentBankDetails { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tab_User_Info> Tab_User_Info { get; set; }
        public virtual DbSet<Tab_User_Info_Temp> Tab_User_Info_Temp { get; set; }
        public virtual DbSet<TabPayumoneyTransectionLog> TabPayumoneyTransectionLogs { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
        public virtual DbSet<BoardTypeSecond> BoardTypeSeconds { get; set; }
        public virtual DbSet<MediumSecond> MediumSeconds { get; set; }
        public virtual DbSet<StandardSecond> StandardSeconds { get; set; }
        public virtual DbSet<UserSubject> UserSubjects { get; set; }
        public virtual DbSet<UserSubjectSelection> UserSubjectSelections { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<Franchy> Franchies { get; set; }
    
        public virtual ObjectResult<PartnerGetCart_Result> PartnerGetCart(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PartnerGetCart_Result>("PartnerGetCart", userIDParameter);
        }
    
        public virtual ObjectResult<PartnerGetCartItems_Result> PartnerGetCartItems(Nullable<int> cartID)
        {
            var cartIDParameter = cartID.HasValue ?
                new ObjectParameter("CartID", cartID) :
                new ObjectParameter("CartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PartnerGetCartItems_Result>("PartnerGetCartItems", cartIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_CheckUserOrAdmin(Nullable<int> loginId)
        {
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CheckUserOrAdmin", loginIdParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spAddSubjectCourse(string subjectName, string subjectDescription, string medium, string boardType, string @class, byte[] notes)
        {
            var subjectNameParameter = subjectName != null ?
                new ObjectParameter("SubjectName", subjectName) :
                new ObjectParameter("SubjectName", typeof(string));
    
            var subjectDescriptionParameter = subjectDescription != null ?
                new ObjectParameter("SubjectDescription", subjectDescription) :
                new ObjectParameter("SubjectDescription", typeof(string));
    
            var mediumParameter = medium != null ?
                new ObjectParameter("Medium", medium) :
                new ObjectParameter("Medium", typeof(string));
    
            var boardTypeParameter = boardType != null ?
                new ObjectParameter("BoardType", boardType) :
                new ObjectParameter("BoardType", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSubjectCourse", subjectNameParameter, subjectDescriptionParameter, mediumParameter, boardTypeParameter, classParameter, notesParameter);
        }
    
        public virtual int spUserAccount(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserAccount", userIdParameter);
        }
    
        public virtual int spUserDetails(string fullName, string eamil, Nullable<System.DateTime> dOB, string gender, string password, string confirmPassword, string zipCode, string state, string city, string block, string mobileNumber, string boardType, string @class, string medium, string reffral, string address)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var eamilParameter = eamil != null ?
                new ObjectParameter("Eamil", eamil) :
                new ObjectParameter("Eamil", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var confirmPasswordParameter = confirmPassword != null ?
                new ObjectParameter("ConfirmPassword", confirmPassword) :
                new ObjectParameter("ConfirmPassword", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var blockParameter = block != null ?
                new ObjectParameter("Block", block) :
                new ObjectParameter("Block", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var boardTypeParameter = boardType != null ?
                new ObjectParameter("BoardType", boardType) :
                new ObjectParameter("BoardType", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var mediumParameter = medium != null ?
                new ObjectParameter("Medium", medium) :
                new ObjectParameter("Medium", typeof(string));
    
            var reffralParameter = reffral != null ?
                new ObjectParameter("Reffral", reffral) :
                new ObjectParameter("Reffral", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserDetails", fullNameParameter, eamilParameter, dOBParameter, genderParameter, passwordParameter, confirmPasswordParameter, zipCodeParameter, stateParameter, cityParameter, blockParameter, mobileNumberParameter, boardTypeParameter, classParameter, mediumParameter, reffralParameter, addressParameter);
        }
    
        public virtual int spUserLogin(string loginName, string loginPassword)
        {
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var loginPasswordParameter = loginPassword != null ?
                new ObjectParameter("LoginPassword", loginPassword) :
                new ObjectParameter("LoginPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserLogin", loginNameParameter, loginPasswordParameter);
        }
    
        public virtual ObjectResult<usp_StudentPayment_Result> usp_StudentPayment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StudentPayment_Result>("usp_StudentPayment");
        }
    
        public virtual ObjectResult<usp_UserList_Result> usp_UserList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserList_Result>("usp_UserList");
        }
    
        public virtual ObjectResult<usp_UserList_Bkp_Result> usp_UserList_Bkp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserList_Bkp_Result>("usp_UserList_Bkp");
        }
    
        public virtual int usp_UserListRecord()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserListRecord");
        }
    
        public virtual int uspAddProductToCart(Nullable<long> partnerUserID, Nullable<int> productID, Nullable<int> quantity, Nullable<decimal> productPrice)
        {
            var partnerUserIDParameter = partnerUserID.HasValue ?
                new ObjectParameter("PartnerUserID", partnerUserID) :
                new ObjectParameter("PartnerUserID", typeof(long));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("ProductPrice", productPrice) :
                new ObjectParameter("ProductPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddProductToCart", partnerUserIDParameter, productIDParameter, quantityParameter, productPriceParameter);
        }
    
        public virtual ObjectResult<uspGetCountry_Result> uspGetCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCountry_Result>("uspGetCountry");
        }
    }
}
